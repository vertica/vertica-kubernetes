name: Build images

on:
  workflow_call:
    inputs:
      operator_image:
        description: 'Name of an existing Vertica operator image. If blank we will build one using the default name'
        type: string
        required: true
      full_vertica_image:
        description: 'Name of an existing full Vertica server v2 image. If blank we will build one using the default name'
        type: string
        required: true
      minimal_vertica_image:
        description: 'Name of an existing minimal Vertica server v2 image. If blank we will build one using the default name'
        type: string
        required: true
      legacy_vertica_image:
        description: 'Name of an existing full image with admintools and SSH support. Leave blank to build one with the default name'
        type: string
        required: true
      vlogger_image:
        description: 'Name of an existing vlogger image. If blank we will build one using the default name'
        type: string
        required: true
      operator_platform:
        description: 'If building the operator, this identifies the platforms to build it for. Separate multiple platforms with a comma. Example: linux/arm64,linux/amd64'
        type: string
        required: false
        default: 'linux/amd64,linux/arm64'
      run_security_scan:
        description: 'What images to scan?'
        type: string
        required: false
        default: 'all, except vertica server'
    secrets:
      DOCKERHUB_USERNAME:
        description: 'When working with images from docker.io, this is the username for login purposes'
        required: true
      DOCKERHUB_TOKEN:
        description: 'When working with images from docker.io, this is the password for login purposes'
        required: true
    outputs:
      operator-image:
        description: "The image name of the VerticaDB operator"
        value: ${{ jobs.build-operator.outputs.image }}
      full-vertica-image:
        description: "The image name of the full vertica server image"
        value: ${{ jobs.build-server-full.outputs.image }}
      minimal-vertica-image:
        description: "The image name of the vertica server, but with optional software removed"
        value: ${{ jobs.build-server-minimal.outputs.image }}
      legacy-vertica-image:
        description: "The image name of the full vertica server image, but with admintools and SSH support"
        value: ${{ jobs.build-server-legacy.outputs.image }}
      vlogger-image:
        description: "The image name of the vertica logger sidecar"
        value: ${{ jobs.build-vlogger.outputs.image }}

# These permissions only apply when not running a PR.  GitHub actions makes PRs
# from forked repositories with extremely limited permissions that cannot be
# overwritten:
# https://github.blog/changelog/2021-04-20-github-actions-control-permissions-for-github_token/
permissions:
  packages: write
  security-events: write

jobs:
  build-server-full:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.full_vertica_image.outputs.value }}
    steps:

    - name: Pick the name of the image
      uses: spilchen/switch-case-action@v2
      id: full_vertica_image
      with:
        default: docker.io/opentext/vertica-k8s-private:latest-master
        conditionals-with-values: |
          ${{ inputs.full_vertica_image != '' }} => ${{ inputs.full_vertica_image }}

    - name: Login to GitHub Container registry for non-PRs
      uses: docker/login-action@v3
      if: ${{ github.event_name != 'pull_request' && startsWith(inputs.full_vertica_image, 'ghcr.io') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: ${{ startsWith(steps.full_vertica_image.outputs.value, 'docker.io') }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: actions/checkout@v4
      if: ${{ inputs.full_vertica_image == '' }}

    - name: Download the RPM
      uses: ./.github/actions/download-rpm
      if: ${{ inputs.full_vertica_image == '' }}

    - name: Build the full server image
      if: ${{ inputs.full_vertica_image == '' }}
      run: |
        # We never push the image we build here because the RPM we use is too
        # old. The RPM needs to be from at least a 23.3.0 server. So, we build
        # here only to test the creation of the image. We don't verify this
        # image in the remaining CI. Pick a dummy image name so as not to
        # overwrite the output build image that the e2e tests will use.
        export VERTICA_IMG=vertica-k8s:kind
        make docker-build-vertica-v2

    - name: Do a local pull of the image
      run: |
        docker pull ${{ steps.full_vertica_image.outputs.value }}

    # We never run the sarif scanner in PRs because PRs don't have permission
    # to upload the results to github.
    - name: Run the Trivy vulnerability scanner (sarif)
      uses: aquasecurity/trivy-action@0.6.2
      if: ${{ inputs.run_security_scan == 'all' && github.event_name != 'pull_request' }}
      with:
        image-ref: ${{ steps.full_vertica_image.outputs.value }}
        ignore-unfixed: true
        security-checks: vuln
        timeout: '20m0s'
        format: 'sarif'
        output: 'trivy-results-vertica-image.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ always() && inputs.run_security_scan == 'all' && github.event_name != 'pull_request' }}
      with:
        sarif_file: 'trivy-results-vertica-image.sarif'

    - name: Run the Trivy vulnerability scanner (pretty print)
      uses: aquasecurity/trivy-action@0.6.2
      if: ${{ inputs.run_security_scan == 'all' }}
      with:
        image-ref: ${{ steps.full_vertica_image.outputs.value }}
        ignore-unfixed: true
        security-checks: vuln
        timeout: '20m0s'
        format: 'table'
        output: 'trivy-results-vertica-image.out'

    - uses: actions/upload-artifact@v4
      if: ${{ always() && inputs.run_security_scan == 'all' }}
      with:
        name: security-scan-server
        path: 'trivy-results-vertica-image.out'

    - name: Print a summary of the job
      run: |
        echo "Image Name: **${{ steps.full_vertica_image.outputs.value }}**" >> $GITHUB_STEP_SUMMARY
        echo "Was Built: ${{ inputs.full_vertica_image == '' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Was Pushed: ${{ inputs.full_vertica_image == '' && github.event_name != 'pull_request' && '**Yes**' || '**No**' }}"
        echo "Was Scanned: ${{ inputs.run_security_scan == 'all' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Size: **$(docker inspect --format '{{.Size}}' ${{ steps.full_vertica_image.outputs.value }} | numfmt --to=iec)**" >> $GITHUB_STEP_SUMMARY
        echo "Image ID: **$(docker inspect --format '{{.ID}}' ${{ steps.full_vertica_image.outputs.value }})**" >> $GITHUB_STEP_SUMMARY
        echo "Digest: **$(IFS=":" read image tag <<< $(echo ${{ steps.full_vertica_image.outputs.value }} | sed -e 's/^docker.io\///'); docker inspect --format='{{.RepoDigests}}' $image:$tag | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep $image | cut -d'@' -f2 || echo "<none>")**" >> $GITHUB_STEP_SUMMARY
        echo -n "Vertica Version: **" >> $GITHUB_STEP_SUMMARY
        echo -n $(docker inspect --format '{{index .Config.Labels "vertica-version"}}' ${{ steps.full_vertica_image.outputs.value }}) >> $GITHUB_STEP_SUMMARY
        echo "**" >> $GITHUB_STEP_SUMMARY

  build-server-legacy:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.legacy_vertica_image.outputs.value }}
    steps:

    - name: set lower case owner name
      env:
        OWNER: '${{ github.repository_owner }}'
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}

    - name: Pick the name of the image
      uses: spilchen/switch-case-action@v2
      id: legacy_vertica_image
      with:
        default: ghcr.io/${{ env.OWNER_LC }}/vertica-k8s:${{ github.sha }}-legacy
        conditionals-with-values: |
          ${{ inputs.legacy_vertica_image != '' }} => ${{ inputs.legacy_vertica_image }}
          ${{ github.event_name == 'pull_request' }} => vertica-k8s:kind-legacy

    - name: Login to GitHub Container registry for non-PRs
      uses: docker/login-action@v3
      if: ${{ github.event_name != 'pull_request' && inputs.legacy_vertica_image == '' || startsWith(inputs.legacy_vertica_image, 'ghcr.io') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: ${{ inputs.legacy_vertica_image != '' && startsWith(inputs.legacy_vertica_image, 'docker.io') }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: actions/checkout@v4
      if: ${{ inputs.legacy_vertica_image == '' }}

    - name: Download the RPM
      uses: ./.github/actions/download-rpm
      if: ${{ inputs.legacy_vertica_image == '' }}

    - name: Build and optionally push legacy server image
      if: ${{ inputs.legacy_vertica_image == '' }}
      run: |
        export VERTICA_IMG=${{ steps.legacy_vertica_image.outputs.value }}
        make docker-build-vertica
        if [ $GITHUB_EVENT_NAME != 'pull_request' ]
        then
          make docker-push-vertica
        fi

    - name: Save the image for consumption by dependent jobs (PRs only)
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        docker save ${{ steps.legacy_vertica_image.outputs.value }} > legacy-vertica-image.tar

    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: legacy-vertica-image
        path: legacy-vertica-image.tar

    - name: Do a local pull of the image if we didn't create it
      if: ${{ inputs.legacy_vertica_image != '' }}
      run: |
        docker pull ${{ inputs.legacy_vertica_image }}

    - name: Print a summary of the job
      run: |
        echo "Image Name: **${{ steps.legacy_vertica_image.outputs.value }}**" >> $GITHUB_STEP_SUMMARY
        echo "Was Built: ${{ inputs.legacy_vertica_image == '' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Was Pushed: ${{ inputs.legacy_vertica_image == '' && github.event_name != 'pull_request' && '**Yes**' || '**No**' }}"
        echo "Was Scanned: **No**" >> $GITHUB_STEP_SUMMARY
        echo "Size: **$(docker inspect --format '{{.Size}}' ${{ steps.legacy_vertica_image.outputs.value }} | numfmt --to=iec)**" >> $GITHUB_STEP_SUMMARY
        echo "Image ID: **$(docker inspect --format '{{.ID}}' ${{ steps.legacy_vertica_image.outputs.value }})**" >> $GITHUB_STEP_SUMMARY
        echo "Digest: **$(IFS=":" read image tag <<< $(echo ${{ steps.legacy_vertica_image.outputs.value }} | sed -e 's/^docker.io\///'); docker inspect --format='{{.RepoDigests}}' $image:$tag | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep $image | cut -d'@' -f2 || echo "<none>")**" >> $GITHUB_STEP_SUMMARY
        echo -n "Vertica Version: **" >> $GITHUB_STEP_SUMMARY
        echo -n $(docker inspect --format '{{index .Config.Labels "vertica-version"}}' ${{ steps.legacy_vertica_image.outputs.value }}) >> $GITHUB_STEP_SUMMARY
        echo "**" >> $GITHUB_STEP_SUMMARY
  build-server-minimal:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.minimal_vertica_image.outputs.value }}
    steps:

    - name: Pick the name of the image
      uses: spilchen/switch-case-action@v2
      id: minimal_vertica_image
      with:
        default: docker.io/opentext/vertica-k8s-private:latest-minimal-master
        conditionals-with-values: |
          ${{ inputs.minimal_vertica_image != '' }} => ${{ inputs.minimal_vertica_image }}

    - name: Login to GitHub Container registry for non-PRs
      uses: docker/login-action@v3
      if: ${{ github.event_name != 'pull_request' && startsWith(inputs.minimal_vertica_image, 'ghcr.io') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: ${{ startsWith(steps.minimal_vertica_image.outputs.value, 'docker.io') }}
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: actions/checkout@v4
      if: ${{ inputs.minimal_vertica_image == '' }}

    - name: Download the RPM
      uses: ./.github/actions/download-rpm
      if: ${{ inputs.minimal_vertica_image == '' }}

    - name: Build the minimal server image
      if: ${{ inputs.minimal_vertica_image == '' }}
      run: |
        # We never push the image we build here because the RPM we use is too
        # old. The RPM needs to be from at least a 23.3.0 server. So, we build
        # here only to test the creation of the image. We don't verify this
        # image in the remaining CI. Pick a dummy image name so as not to
        # overwrite the output build image that the e2e tests will use.
        export VERTICA_IMG=vertica-k8s:kind-minimal
        export MINIMAL_VERTICA_IMG=yes
        make docker-build-vertica-v2 

    - name: Do a local pull of the image
      run: |
        docker pull ${{ steps.minimal_vertica_image.outputs.value }}

    - name: Print a summary of the job
      run: |
        echo "Image Name: **${{ steps.minimal_vertica_image.outputs.value }}**" >> $GITHUB_STEP_SUMMARY
        echo "Was Built: ${{ inputs.minimal_vertica_image == '' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Was Pushed: ${{ inputs.minimal_vertica_image == '' && github.event_name != 'pull_request' && '**Yes**' || '**No**' }}"
        echo "Was Scanned: **No**" >> $GITHUB_STEP_SUMMARY
        echo "Size: **$(docker inspect --format '{{.Size}}' ${{ steps.minimal_vertica_image.outputs.value }} | numfmt --to=iec)**" >> $GITHUB_STEP_SUMMARY
        echo "Image ID: **$(docker inspect --format '{{.ID}}' ${{ steps.minimal_vertica_image.outputs.value }})**" >> $GITHUB_STEP_SUMMARY
        echo "Digest: **$(IFS=":" read image tag <<< $(echo ${{ steps.minimal_vertica_image.outputs.value }} | sed -e 's/^docker.io\///'); docker inspect --format='{{.RepoDigests}}' $image:$tag | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep $image | cut -d'@' -f2 || echo "<none>")**" >> $GITHUB_STEP_SUMMARY
        echo -n "Vertica Version: **" >> $GITHUB_STEP_SUMMARY
        echo -n $(docker inspect --format '{{index .Config.Labels "vertica-version"}}' ${{ steps.minimal_vertica_image.outputs.value }}) >> $GITHUB_STEP_SUMMARY
        echo "**" >> $GITHUB_STEP_SUMMARY

  build-operator:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.operator_image.outputs.value }}
    steps:

    - name: set lower case owner name
      env:
        OWNER: '${{ github.repository_owner }}'
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}

    - name: Pick the name of the image
      uses: spilchen/switch-case-action@v2
      id: operator_image
      with:
        default: ghcr.io/${{ env.OWNER_LC }}/verticadb-operator:${{ github.sha }}
        conditionals-with-values: |
          ${{ inputs.operator_image != '' }} => ${{ inputs.operator_image }}
          ${{ github.event_name == 'pull_request' }} => verticadb-operator:kind

    - name: Login to GitHub Container registry for non-PRs
      uses: docker/login-action@v3
      if: ${{ github.event_name != 'pull_request' && inputs.operator_image == '' || startsWith(inputs.operator_image, 'ghcr.io') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/checkout@v4
      if: ${{ inputs.operator_image == '' }}

    - name: Set up Go
      uses: ./.github/actions/setup-go
      if: ${{ inputs.operator_image == '' }}

    - name: Build and optionally push operator image
      if: ${{ inputs.operator_image == '' }}
      run: |
        export OPERATOR_IMG=${{ steps.operator_image.outputs.value }}
        export PLATFORMS=${{ inputs.operator_platform }}
        # For pull requests we build the operator locally then pass it around
        # to dependent stages as an artifact. Otherwise, we will build a
        # cross-platform operator. The make target we use for that handles
        # pushing it up to an external repository.
        if [ $GITHUB_EVENT_NAME != 'pull_request' ]
        then
          make docker-build-crossplatform-operator
        else
          make docker-build-operator
        fi

    - name: Save the image for consumption by dependent jobs (PRs only)
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        docker save ${{ steps.operator_image.outputs.value }} > operator-image.tar

    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: operator-image
        path: operator-image.tar

    - name: Do a local pull of the image if we didn't create it
      if: ${{ inputs.operator_image != '' }}
      run: |
        docker pull ${{ inputs.operator_image }}

    - name: Run the Trivy vulnerability scanner (sarif)
      uses: aquasecurity/trivy-action@0.6.2
      if: ${{ inputs.run_security_scan != 'none' && github.event_name != 'pull_request' }}
      with:
        image-ref: ${{ steps.operator_image.outputs.value }}
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results-verticadb-operator-image.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ always() && inputs.run_security_scan != 'none' && github.event_name != 'pull_request' }}
      with:
        sarif_file: 'trivy-results-verticadb-operator-image.sarif'

    - name: Run the Trivy vulnerability scanner (pretty print)
      uses: aquasecurity/trivy-action@0.6.2
      if: ${{ inputs.run_security_scan != 'none' }}
      with:
        image-ref: ${{ steps.operator_image.outputs.value }}
        ignore-unfixed: true
        format: 'table'
        output: 'trivy-results-verticadb-operator-image.out'

    - uses: actions/upload-artifact@v4
      if: ${{ always() && inputs.run_security_scan != 'none' }}
      with:
        name: security-scan-operator
        path: 'trivy-results-verticadb-operator-image.out'

    - name: Print a summary of the job
      run: |
        echo "Image Name: **${{ steps.operator_image.outputs.value }}**" >> $GITHUB_STEP_SUMMARY
        echo "Was Built: ${{ inputs.operator_image == '' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Was Pushed: ${{ inputs.operator_image == '' && github.event_name != 'pull_request' && '**Yes**' || '**No**' }}"
        echo "Was Scanned: ${{ inputs.run_security_scan != 'none' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Size: **$(docker inspect --format '{{.Size}}' ${{ steps.operator_image.outputs.value }} | numfmt --to=iec)**" >> $GITHUB_STEP_SUMMARY
        echo "Image ID: **$(docker inspect --format '{{.ID}}' ${{ steps.operator_image.outputs.value }})**" >> $GITHUB_STEP_SUMMARY
        echo "Digest: **$(IFS=":" read image tag <<< $(echo ${{ steps.operator_image.outputs.value }} | sed -e 's/^docker.io\///'); docker inspect --format='{{.RepoDigests}}' $image:$tag | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep $image | cut -d'@' -f2 || echo "<none>")**" >> $GITHUB_STEP_SUMMARY

  build-vlogger:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.vlogger_image.outputs.value }}
    steps:

    - name: set lower case owner name
      env:
        OWNER: '${{ github.repository_owner }}'
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}

    - name: Pick the name of the image
      uses: spilchen/switch-case-action@v2
      id: vlogger_image
      with:
        default: ghcr.io/${{ env.OWNER_LC }}/vertica-logger:${{ github.sha }}
        conditionals-with-values: |
          ${{ inputs.vlogger_image != '' }} => ${{ inputs.vlogger_image }}
          ${{ github.event_name == 'pull_request' }} => vertica-logger:kind

    - name: Login to GitHub Container registry for non-PRs
      uses: docker/login-action@v3
      if: ${{ github.event_name != 'pull_request' && inputs.vlogger_image == '' || startsWith(inputs.vlogger_image, 'ghcr.io') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/checkout@v4
      if: ${{ inputs.vlogger_image == '' }}

    - name: Build and optionally push vlogger image
      if: ${{ inputs.vlogger_image == '' }}
      run: |
        export VLOGGER_IMG=${{ steps.vlogger_image.outputs.value }}
        make docker-build-vlogger
        if [ $GITHUB_EVENT_NAME != 'pull_request' ]
        then
          make docker-push-vlogger
        fi

    - name: Save the image for consumption by dependent jobs (PRs only)
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        docker save ${{ steps.vlogger_image.outputs.value }} > vlogger-image.tar

    - uses: actions/upload-artifact@v4
      if: ${{ github.event_name == 'pull_request' }}
      with:
        name: vlogger-image
        path: vlogger-image.tar

    - name: Do a local pull of the image if we didn't create it
      if: ${{ inputs.vlogger_image != '' }}
      run: |
        docker pull ${{ inputs.vlogger_image }}

    - name: Run the Trivy vulnerability scanner (sarif)
      uses: aquasecurity/trivy-action@0.6.2
      if: ${{ inputs.run_security_scan != 'none' && github.event_name != 'pull_request' }}
      with:
        image-ref: ${{ steps.vlogger_image.outputs.value }}
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results-vertica-logger-image.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: ${{ always() && inputs.run_security_scan != 'none' && github.event_name != 'pull_request' }}
      with:
        sarif_file: 'trivy-results-vertica-logger-image.sarif'

    - name: Run the Trivy vulnerability scanner (pretty print)
      uses: aquasecurity/trivy-action@0.6.2
      if: ${{ inputs.run_security_scan != 'none' }}
      with:
        image-ref: ${{ steps.vlogger_image.outputs.value }}
        ignore-unfixed: true
        format: 'table'
        output: 'trivy-results-vertica-logger-image.out'

    - uses: actions/upload-artifact@v4
      if: ${{ always() && inputs.run_security_scan != 'none' }}
      with:
        name: security-scan-logger
        path: 'trivy-results-vertica-logger-image.out'

    - name: Print a summary of the job
      run: |
        echo "Image Name: **${{ steps.vlogger_image.outputs.value }}**" >> $GITHUB_STEP_SUMMARY
        echo "Was Built: ${{ inputs.vlogger_image == '' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Was Pushed: ${{ inputs.vlogger_image == '' && github.event_name != 'pull_request' && '**Yes**' || '**No**' }}"
        echo "Was Scanned: ${{ inputs.run_security_scan != 'none' && '**Yes**' || '**No**' }}" >> $GITHUB_STEP_SUMMARY
        echo "Size: **$(docker inspect --format '{{.Size}}' ${{ steps.vlogger_image.outputs.value }} | numfmt --to=iec)**" >> $GITHUB_STEP_SUMMARY
        echo "Image ID: **$(docker inspect --format '{{.ID}}' ${{ steps.vlogger_image.outputs.value }})**" >> $GITHUB_STEP_SUMMARY
        echo "Digest: **$(IFS=":" read image tag <<< $(echo ${{ steps.vlogger_image.outputs.value }} | sed -e 's/^docker.io\///'); docker inspect --format='{{.RepoDigests}}' $image:$tag | sed 's:^.\(.*\).$:\1:' | tr " " "\n" | grep $image | cut -d'@' -f2 || echo "<none>")**" >> $GITHUB_STEP_SUMMARY

