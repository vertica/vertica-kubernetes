name: 'Run an e2e leg'
description: 'Will run all tests under one e2e leg with specific configurations'
inputs:
  vlogger-image:
    description: 'Name of the vertica logger image'
    required: true
  operator-image:
    description: 'Name of the operator image'
    required: true
  vertica-image:
    description: 'Name of the vertica server image'
    required: true
  artifact-suffix:
    description: 'Version of the suffix artifact file'
    required: false
    default: ''
  vertica-deployment-method:
    description: 'Vertica deployment method'
    required: false
    default: admintools
  vertica-superuser-name:
    description: 'Vertica superuser name'
    required: false
    default: dbadmin
  # secret not supported in GitHub action, treat this as input here
  dockerhub-username:
    description: 'Docker Hub username'
    required: true
  # secret not supported in GitHub action, treat this as input here
  dockerhub-token:
    description: 'Docker Hub token'
    required: true
  leg-identifier:
    description: 'Testing leg identifier'
    required: true
  communal-storage-type:
    description: 'The type of communal storage used (hostpath, s3, azb)'
    required: false
    default: 'hostpath'
  deploy-with:
    description: 'Operator deployment method (helm, olm)'
    required: false
    default: 'helm'
  e2e-parallelism:
    description: 'Value of E2E_PARALLELISM'
    required: false
    default: ''
  controllers-scope:
    description: 'Controllers deployment scope (cluster, namespace)'
    required: false
    default: 'cluster'
  helm-overrides:
    description: 'Value of HELM_OVERRIDES (to be used in helm install command)'
    required: false
    default: ''
  minimum-vertica-image:
    description: 'The minimum version of the vertica server image allowed'
    required: false
    default: ''
runs:
  using: "composite"
  steps:

    - uses: actions/checkout@v4

    - name: Set up e2e environment
      uses: ./.github/actions/setup-e2e

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: ${{ startsWith(inputs.vertica-image, 'docker.io') }}
      with:
        username: ${{ inputs.dockerhub-username }}
        password: ${{ inputs.dockerhub-token }}

    - name: Run e2e tests
      shell: bash
      run: |
        set -o errexit
        set -o xtrace

        # Set KUSTOMIZE_CFG (groups of communal: azb, s3, hostpath)
        # if [[ "${{ inputs.leg-identifier }}" == "leg-1" || \
        #       "${{ inputs.leg-identifier }}" == "leg-8" ]]; then
        #   export KUSTOMIZE_CFG=tests/kustomize-defaults-azb-ci.cfg;
        # elif [[ "${{ inputs.leg-identifier }}" != "leg-4" && \
        #         "${{ inputs.leg-identifier }}" != "operator-upgrade" && \
        #         "${{ inputs.leg-identifier }}" != "server-upgrade" && \
        #         "${{ inputs.leg-identifier }}" != "udx" ]]; then
        #   export KUSTOMIZE_CFG=tests/kustomize-defaults-hostpath-ci.cfg;
        # fi
        # Set KUSTOMIZE_CFG based on communal storage type
        if [[ "${{ inputs.communal-storage-type }}" == "azb" ]]; then
          export KUSTOMIZE_CFG=tests/kustomize-defaults-azb-ci.cfg;
        elif [[ "${{ inputs.communal-storage-type }}" == "hostpath" ]]; then
          export KUSTOMIZE_CFG=tests/kustomize-defaults-hostpath-ci.cfg;
        fi
        # No need to set KUSTOMIZE_CFG if communal storage is s3

        export VERTICA_IMG=${{ inputs.vertica-image }}
        export OPERATOR_IMG=${{ inputs.operator-image }}
        export VLOGGER_IMG=${{ inputs.vlogger-image }}

        # Set DEPLOY_WITH (default value is helm)
        # if [[ "${{ inputs.leg-identifier }}" == "leg-1" ]]; then
        #   export DEPLOY_WITH=olm;
        # elif [[ "${{ inputs.leg-identifier }}" == "leg-5" ]]; then
        #   export DEPLOY_WITH=helm;
        # fi
        export DEPLOY_WITH="${{ inputs.deploy-with }}";

        # Set E2E_PARALLELISM
        # if [[ "${{ inputs.leg-identifier }}" == "leg-5" || \
        #       "${{ inputs.leg-identifier }}" == "operator-upgrade" ]]; then
        #   # We cannot parallelize these tests because they each deploy/undeploy
        #   # the cluster scoped operator. You can only have a single verticadb
        #   # operator running in the k8s cluster.
        #   export E2E_PARALLELISM=1;
        # fi
        if [[ "${{ inputs.e2e-parallelism }}" != "" ]]; then
          export E2E_PARALLELISM="${{ inputs.e2e-parallelism }}";
        fi

        # Set VERTICA_DEPLOYMENT_METHOD (default value is admintools)
        export VERTICA_DEPLOYMENT_METHOD=${{ inputs.vertica-deployment-method }};

        # Set VERTICA_SUPERUSER_NAME (condition on inputs.vertica-superuser-name, use dbadmin as default, enforce dbadmin for admintools)
        # if [[ "${{ inputs.leg-identifier }}" == "leg-4" ]]; then
        #   export VERTICA_SUPERUSER_NAME=${{ inputs.vertica-superuser-name }};
        #   if [ -z "${VERTICA_SUPERUSER_NAME}" -o "${VERTICA_DEPLOYMENT_METHOD}" != "vclusterops" ]; then 
        #     export VERTICA_SUPERUSER_NAME="dbadmin";
        #   fi
        # fi
        export VERTICA_SUPERUSER_NAME=${{ inputs.vertica-superuser-name }};
        if [ -o "${VERTICA_DEPLOYMENT_METHOD}" != "vclusterops" ]; then
          # Only "dbadmin" can be used when deployment type is admintools
          export VERTICA_SUPERUSER_NAME="dbadmin";
        fi

        # Set CONTROLLERS_SCOPE (default value is cluster)
        # if [[ "${{ inputs.leg-identifier }}" == "leg-2" ]]; then
        #   # All of the tests in this leg will use a namespace scoped operator
        #   export CONTROLLERS_SCOPE=namespace;
        # fi
        export CONTROLLERS_SCOPE="${{ inputs.controllers-scope }}";

        # Set HELM_OVERRIDES
        # if [[ "${{ inputs.leg-identifier }}" == "leg-4" ]]; then
        #   # All helm deployments will use cert-manager to create the webhook cert
        #   export HELM_OVERRIDES="--set webhook.certSource=cert-manager";
        # fi
        if [[ "${{ inputs.helm-overrides }}" != "" ]]; then
          export HELM_OVERRIDES="${{ inputs.helm-overrides }}";
        fi

        # Set E2E_TEST_DIRS
        if [[ "${{ inputs.leg-identifier }}" == "operator-upgrade" ]]; then
          export E2E_TEST_DIRS="tests/e2e-operator-upgrade-overlays";
        else
          export E2E_TEST_DIRS="tests/e2e-${{ inputs.leg-identifier }}"
          if [[ "${{ inputs.leg-identifier }}" == "leg-1" || \
                "${{ inputs.leg-identifier }}" == "leg-2" || \
                "${{ inputs.leg-identifier }}" == "leg-3" || \
                "${{ inputs.leg-identifier }}" == "leg-5" || \
                "${{ inputs.leg-identifier }}" == "server-upgrade" ]]; then
            # These legs have some tests that only run with admintools deployment
            if [[ "${VERTICA_DEPLOYMENT_METHOD}" != "vclusterops" ]]; then
              E2E_TEST_DIRS+=" tests/e2e-${{ inputs.leg-identifier }}-at-only";
            fi
          fi
        fi

        # Set BASE_VERTICA_IMG based on $VERTICA_IMG
        # if [[ "${{ inputs.leg-identifier }}" == "leg-5" || \
        #       "${{ inputs.leg-identifier }}" == "server-upgrade" ]]; then
        #   # Some tests in this suite do an upgrade, so set the base image to upgrade from
        #   export BASE_VERTICA_IMG=$(scripts/guess-server-upgrade-base-image.sh $VERTICA_IMG);
        #   echo "Upgrading server from image: $BASE_VERTICA_IMG";
        # fi
        # Some tests in some suites do an upgrade, so set the base image to upgrade from
        # If a test suite doesn't involve an upgrade, this environment variable is left unused
        export BASE_VERTICA_IMG=$(scripts/guess-server-upgrade-base-image.sh $VERTICA_IMG);

        # Enforce server image version
        # if [[ "${{ inputs.leg-identifier }}" == "leg-6" || \
        #       "${{ inputs.leg-identifier }}" == "leg-7" || \
        #       "${{ inputs.leg-identifier }}" == "leg-8" ]]; then
        #   # The image must be at least a 24.2.0+.
        #   # If it is older, we complete this leg as a no-op.
        #   if scripts/is-image.sh -i $VERTICA_IMG older 24.2.0
        #   then
        #     echo "Old version detected, skipping all of the tests"
        #     exit 0
        #   fi
        # fi
        if [[ "${{ inputs.minimum-vertica-image }}" != "" ]]; then
          # The image must be at least a ${{ inputs.minimum-vertica-image }}+.
          # If it is older, we complete this leg as a no-op.
          if scripts/is-image.sh -i $VERTICA_IMG older ${{ inputs.minimum-vertica-image }}
          then
            echo "Old version detected, skipping all of the tests"
            exit 0
          fi
        fi

        # Setup operator upgrade test suite (can be removed)
        # if [[ "${{ inputs.leg-identifier }}" == "operator-upgrade" ]]; then
        #   scripts/setup-operator-upgrade-testsuite.sh
        # fi

        # Run int test script (server-upgrade should be s3)
        # if [[ "${{ inputs.leg-identifier }}" == "server-upgrade" ]]; then
        #   scripts/run-k8s-int-tests.sh -s -e tests/external-images-server-upgrade-ci.txt;
        # elif [[ "${{ inputs.leg-identifier }}" == "leg-1" || \
        #         "${{ inputs.leg-identifier }}" == "leg-8" ]]; then
        #   scripts/run-k8s-int-tests.sh -s -e tests/external-images-azb-ci.txt;
        # elif [[ "${{ inputs.leg-identifier }}" == "leg-4" || \
        #         "${{ inputs.leg-identifier }}" == "operator-upgrade" || \
        #         "${{ inputs.leg-identifier }}" == "udx" ]]; then
        #   scripts/run-k8s-int-tests.sh -s -e tests/external-images-s3-ci.txt;
        # else
        #   mkdir -p $GITHUB_WORKSPACE/../host-path;
        #   scripts/run-k8s-int-tests.sh -m $GITHUB_WORKSPACE/../host-path -s;
        # fi
        # Run int test script
        if [[ "${{ inputs.communal-storage-type }}" == "azb" ]]; then
          scripts/run-k8s-int-tests.sh -s -e tests/external-images-azb-ci.txt;
        elif [[ "${{ inputs.communal-storage-type }}" == "hostpath" ]]; then
          mkdir -p $GITHUB_WORKSPACE/../host-path;
          scripts/run-k8s-int-tests.sh -m $GITHUB_WORKSPACE/../host-path -s;
        else
          scripts/run-k8s-int-tests.sh -s -e tests/external-images-s3-ci.txt;
        fi


    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: >-
          logs-e2e
          -${{ inputs.leg-identifier }}
          -${{ inputs.vertica-deployment-method }}
          ${{ inputs.artifact-suffix }}
        path: ${{ github.workspace }}/int-tests-output/*