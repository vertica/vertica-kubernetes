# Alloy configmap for loki
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    control-plane: verticadb-operator
  name: alloy
  namespace: system
data:
  config.alloy: |-
    loki.write "default" {
      endpoint {
        url = "http://{{ .Release.Name }}-loki-gateway.{{ .Release.Namespace }}.svc.cluster.local/loki/api/v1/push"
      }
    }

    // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
    discovery.kubernetes "vertica_pods" {
      role = "pod"
      selectors {
        role = "pod"
        label = "app.kubernetes.io/name in (vertica, verticadb-operator)"
      }
    }

    // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.vertica_pods.targets

      // Label creation - "namespace" field from "__meta_kubernetes_namespace"
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }
    }

    // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
    loki.source.kubernetes "pod_logs" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pod_logs.receiver]
    }

    loki.process "pod_logs" {
      stage.static_labels {
          values = {
            cluster = "vertica",
          }
      }

      forward_to = [loki.write.default.receiver]
    }

    // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
    // into log lines to forward to other Loki components.
    loki.source.kubernetes_events "cluster_events" {
      job_name   = "integrations/kubernetes/eventhandler"
      log_format = "logfmt"
      forward_to = [
        loki.process.cluster_events.receiver,
      ]
    }

    // loki.process receives log entries from other loki components, applies one or more processing stages,
    // and forwards the results to the list of receivers in the component's arguments.
    loki.process "cluster_events" {
      forward_to = [loki.write.default.receiver]

      stage.static_labels {
        values = {
          cluster = "vertica",
        }
      }

      stage.labels {
        values = {
          kubernetes_cluster_events = "events",
        }
      }
    }
