# (c) Copyright [2021-2022] Micro Focus or one of its affiliates.
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for verticadb-operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -------------------------------------------------------------------------------
# NOTE: Whenever changing default values in here, be sure to update the
# README.md in this directory.  That file lists out the helm chart parameters
# with the default values.
# -------------------------------------------------------------------------------

# To control the name of all of the objects created in the helm chart.
# nameOverride: verticadb-operator

image:
  repo: docker.io
  name: vertica/verticadb-operator:1.7.0
  pullPolicy: IfNotPresent

rbac_proxy_image:
  repo: gcr.io
  name: kubebuilder/kube-rbac-proxy:v0.13.0

imagePullSecrets: null

webhook:
  # The webhook requires a TLS certficate to work.  By default we rely on
  # cert-manager to be installed as we use it generate the cert.  cert-manager
  # can be installed with this command:
  # kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml
  #
  # If you don't want to use cert-manager, you need to specify your own cert,
  # which you can do with the next two parameters.
  #
  # tlsSecret is a name of a secret in the same namespace the chart is being
  # installed in.  The secret must have the keys: tls.key, ca.crt, and tls.crt.
  tlsSecret: ""
  # caBundle is a PEM encoded CA bundle that will be used to validate the
  # webhook's server certificate.  If unspecified, system trust roots on the
  # apiserver are used.
  caBundle: ""
  # If true, the webhook will be enabled and its configuration is setup by the helm chart. 
  # Setting this to false will disable the webhook. The webhook setup needs privileges to add 
  # validatingwebhookconfiguration and mutatingwebhookconfiguration, both are cluster scoped. 
  # If you do not have necessary privileges to add these configurations, then this option 
  # can be used to skip that and still deploy the operator.
  enable: true

logging:
  # filePath is the path to the log file. If omitted, all logging will be written to stdout.
  filePath: ""
  # maxFileSize is the maximum size, in MB, of the logging file before log rotation occurs. 
  # This is only applicable if logging to a file.
  maxFileSize: 500
  # maxFileAge is the maximum number of days to retain old log files based on the timestamp
  # encoded in the file. This is only applicable if logging to a file.
  maxFileAge: 7
  # maxFileRotation is the maximum number of files that are kept in rotation before the old ones are removed. 
  # This is only applicable if logging to a file.
  maxFileRotation: 3
  # level is the minimum logging level. Valid values are: debug, info, warn, and error
  level: info
  # dev Enables development mode if true and production mode otherwise and also affects
  # logs format. A few differences on logging will be: in dev mode stack traces are produced more liberally,
  # on logs of WarnLevel and above while in production, they are included on logs of ErrorLevel and above.
  # Moreover dev mode disables sampling. 
  dev: false


# The resource requirements for the operator pod.  See this for more info:
# https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
# These defaults must be kept in sync with config/manifests/kustomization.yaml
resources:
  limits:
    cpu: 100m
    memory: 750Mi
  requests:
    cpu: 100m
    memory: 20Mi

# If set, this will be the name of an existing service account that will be used to run
# any of the pods related to this operator. This includes the pod for the operator itself, 
# as well as any pods created for our custom resource. The necessary roles and role bindings
# must be already setup for this service account. If unset, we will use the default service account name
# and create the necessary roles and role bindings to allow the pods to interact with the apiserver.
serviceAccountNameOverride: ""

prometheus:
  # Controls exposing of the prometheus metrics endpoint.  Valid options are:
  #
  # EnableWithAuthProxy: A new service object will be created that exposes the
  #    metrics endpoint.  Access to the metrics are controlled by rbac rules
  #    using the proxy (see https://github.com/brancz/kube-rbac-proxy).  The
  #    metrics endpoint will use the https scheme.
  # EnableWithoutAuth: Like EnableWithAuthProxy, this will create a service
  #    object to expose the metrics endpoint.  However, there is no authority
  #    checking when using the endpoint.  Anyone who had network access
  #    endpoint (i.e. any pod in k8s) will be able to read the metrics.  The
  #    metrics endpoint will use the http scheme.
  # Disable: Prometheus metrics are not exposed at all.
  expose: EnableWithAuthProxy

  # Set this to true if you want to create a ServiceMonitor.  This object is a
  # CR provided by the prometheus operator to allow for easy service discovery.
  # https://github.com/prometheus-operator/prometheus-operator
  createServiceMonitor: false

  # Set this to true if you want the helm install to create the rbac rules for
  # accessing the metrics endpoint when it is protected by the rbac auth proxy.
  # Note: setting this to true for multiple operator installs on the same
  # system will fail due to the cluster scoped nature of the rbac rules.
  createProxyRBAC: false
